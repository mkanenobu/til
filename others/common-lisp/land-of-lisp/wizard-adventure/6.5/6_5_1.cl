; 6.5.1 Lambda

; lambdaがすること
; 簡単に言えば、lambdaを使えば名前を与えずに関数を作ることが出来る

; 5章で見たように特定の名前で表される関数そのもの取り扱うにはfunctionオペレータが使える
(print #'car)

; lambdaはこの2つのステップを一度にやる
; つまり名前を介さずに関数を定義して関数そのものを得る
; lambdaの引数はdefunで定義するときと同じで、最初が定義される関数の引数で残りが関数の本体
(print (lambda (n) (/ n 2)))
; 関数のみを得られるので、mapcarなどの高階関数に直接使える
(print (mapcar (lambda (n) (/ n 2)) '(2 4 6 8 10)))

; 2章で説明したように、関数の引数は関数自体が評価される前に評価されるが、
; lambda（コマンド）の引数はlambdaによって作られる関数が評価されるまで評価されない
; つまりlambdaは本物の関数ではない、これはマクロと呼ばれるもの
; lambdaが返す値は関数だが、lambda自体はマクロなのでややこしい
; Lispで「ラムダ関数」というときはlambdaマクロのことではなくlambdaマクロによって作られる関数のことを指す
